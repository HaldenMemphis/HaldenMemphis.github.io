<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>项目总结 on yfliu 的 知识体系</title><link>https://blog.yfliu.site/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</link><description>Recent content in 项目总结 on yfliu 的 知识体系</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 08 Jul 2023 11:21:39 +0000</lastBuildDate><atom:link href="https://blog.yfliu.site/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml"/><item><title>[OpenMRS-架构设计]为何选择Clickhouse</title><link>https://blog.yfliu.site/posts/notes/%E4%B8%BA%E4%BD%95%E9%80%89%E6%8B%A9clickhouse/</link><pubDate>Sat, 08 Jul 2023 11:21:39 +0000</pubDate><guid>https://blog.yfliu.site/posts/notes/%E4%B8%BA%E4%BD%95%E9%80%89%E6%8B%A9clickhouse/</guid><description>为何选择Clickhouse &amp;ndash; 为OpenMRS开发一个基于Spring的物联网系统 本项目虽然实现的仅仅只是一个简单的血糖监测的物联网系统，但是我们可以敏锐的察觉到，所记录下的患者的医疗数据，对于科研和数据分析带来的价值。当然， 这必须在符合道德规范的前提下开展。因此本项目并不会实现这些。但是，本项目在设计之时，也尽可能考虑到未来可能的对数据的利用。因此，本项目也为未来对数据进行分析，从架构层面留下便利。
首先，我们同样可以敏锐的察觉到，血糖监测的物联网系统本质上，记录的健康数据是一种时序数据。从结构上说，这是一种不适应传统关系数据库的数据。传统的关系数据库，通常使用 B+ tree 来进行数据存储。因为 B+ tree 能够显著减少查询和顺序插入时磁盘花费在寻道上的时间。对于 90% 以上场景都是写入的时序数据库，B+ tree 很明显是不合适的。
因此，本项目计划使用专门的时序数据库进行实时健康数据的存储。在进行对比后，本项目选择使用 Clickhouse 作为时序数据存储的基础设施。
理由：
Clickhouse 设计为 OLAP 数据库管理系统，它设计为尽可能优秀的完成一项任务：尽可能快地过滤和聚合数据。即 Group By。这一选择使得未来，对病人的健康数据进行学术研究和数据分析留下了方便。 Clickhouse使用面向列的存储： 源数据通常包含数百甚至数千列，而报表只能使用其中的几个列。系统需要避免读取不必要的列，以避免昂贵的磁盘读取操作。Clickhouse的列式存储很好的适应了时序数据的存储。 数据压缩：Clickhouse有着完善方便的数据压缩方法。仅需通过配置文件配置即可实现。并且，类似血糖监测产生的时序数据，非常适合进行压缩，从存储上有着较高的经济性。 合理的冷热分离机制：当医生或者患者查看健康数据时，往往最经常查看的是近一天，一周的数据。较少查看较早的数据。Clickhouse 集群可以同时拥有SSD与HDD存储。通过Clickhouse的TTL机制，可以设定时间，将冷数据转移到经济性更佳的HDD磁盘上。 因此，本项目最终决定选用 Clickhouse 作为存储时序健康数据的基础设施。</description></item><item><title>物联网平台的多租户实现</title><link>https://blog.yfliu.site/posts/notes/%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AE%9E%E7%8E%B0/</link><pubDate>Sat, 22 Apr 2023 10:21:39 +0000</pubDate><guid>https://blog.yfliu.site/posts/notes/%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AE%9E%E7%8E%B0/</guid><description>物联网平台的多租户实现 一个开放的物联网平台，对多个客户实行租户隔离是十分必要的。不论是从数据安全，还是资源分配上来说，实行租户隔离都能够更好的实现逻辑数据隔离，提升数据安全性。
从理论上来说，实现多租户隔离有3种形式：
完全隔离：独立数据库 独立数据库是安全性，隔离性最高的方式 成本高，需要为每个租户架设一个独立数据库 半隔离：公用数据库，独立schema 一定程度的逻辑数据隔离 成本合理 伪隔离：共享数据表 仅采用TenantID标注数据所属租户 出于成本综合考虑，平台采用了第二种方式。
结构 在平台的架构上，我们选择了Postgresql作为主数据库。这个数据库承担了用户模块的相关内容，例如租户表，权限表，用户表。同时，还承担了物模型、设备状态的存储工作。
但是由于目前租户数量有限，量级较小，但是出于数据安全隔离角度考虑，我们选择了相对折中的独立Schema架构。
根据需求，我们的数据库架构大体如下：
以用户模块为例：
为了保证性能与可用性，我们针对Postgressql，采用了三节点集群，所有的集群之间数据完全同步。在数据库中，我们设立了 iot-sys-user DB, 这个db在所有高可用节点都是通过定期任务进行同步的。在数据库中，我们采用schema进行租户隔离。我们设计了以租户代码为编号的schema，每个schema下都具有完全相同的数据表结构：
t_sys_usr: 用户表 -&amp;gt; 负责存储用户ID，邮箱，salt，SHA256或国密加密后的密码，验证符，创建时间，所属租户 t_sys_usrinfo: 用户信息表，存储了用户个性化的详细信息，例如年龄，头像url，description等内容 t_sys_role: 用户权限表，本张表详细记录了用户所具有的权限。 t_sys_agreement:记录用户阅读的agreement信息，版本，以确定是否在用户登录时要求用户阅读新的用户协议</description></item></channel></rss>