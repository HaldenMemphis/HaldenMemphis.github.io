<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>知识储备 on yfliu 的 知识体系</title>
    <link>https://blog.yfliu.site/tags/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</link>
    <description>Recent content in 知识储备 on yfliu 的 知识体系</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 21 May 2023 17:07:39 +0000</lastBuildDate><atom:link href="https://blog.yfliu.site/tags/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cloud Computing</title>
      <link>https://blog.yfliu.site/posts/notes/cloud-computing/</link>
      <pubDate>Sun, 21 May 2023 17:07:39 +0000</pubDate>
      
      <guid>https://blog.yfliu.site/posts/notes/cloud-computing/</guid>
      <description>Cloud Computing知识架构 Cloud Platform Architecture 云计算的主要架构区分为，Private，Public 以及 Hybrid。
Private (私有云) 架构：适合重视数据安全风险的，有合规要求的，希望将数据完全把握在自己手里的客户，例如金融机构，或自有数据中心的。同样这部分架构往往适用于开发环境，测试环境。利于在开发和测试过程中精准定位问题，最终推送到位于公有云上的生产环境。</description>
    </item>
    
    <item>
      <title>[OpenMRS] 为OpenMRS开发一个基于Spring的物联网系统</title>
      <link>https://blog.yfliu.site/posts/notes/openmrs-%E4%B8%BAopenmrs%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Espring%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 11 May 2023 10:21:39 +0000</pubDate>
      
      <guid>https://blog.yfliu.site/posts/notes/openmrs-%E4%B8%BAopenmrs%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Espring%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E7%B3%BB%E7%BB%9F/</guid>
      <description>[OpenMRS] 为OpenMRS开发一个基于Spring的物联网系统 OpenMRS（Open Medical Record System）是一个开源的医疗记录系统，旨在帮助医疗机构管理和维护病人的电子医疗记录（EMR）。它提供了一个可定制的平台，可以根据特定的医疗环境和需求来构建和部署电子病历系统。
OpenMRS支持多种功能，包括患者注册、病历管理、药物管理、实验室结果跟踪、报告生成等。它的核心组件是一个灵活的数据模型，可以根据不同医疗机构的需求进行自定义。它还提供了一套开发工具和API，使开发者能够创建定制的模块和扩展功能。
本文旨在开发一套基于Spring的物联网系统，并为OpenMRS赋予通过Plugin访问此物联网系统的能力。我们认为这将会赋予OpenMRS记录慢性病（例如：糖尿病，心脏病）患者实时生理数据的能力，并为医生的治疗、用药提供更详细的数据参考，以一定程度上改善偶发性疾病症状和生理数据难以被记录的问题。
&amp;ndash;to be continued</description>
    </item>
    
    <item>
      <title>Github Actions 实践</title>
      <link>https://blog.yfliu.site/posts/notes/github-actions%E5%AE%9E%E6%88%98/</link>
      <pubDate>Mon, 08 May 2023 14:21:39 +0000</pubDate>
      
      <guid>https://blog.yfliu.site/posts/notes/github-actions%E5%AE%9E%E6%88%98/</guid>
      <description>Github Actions 实践 &amp;ndash; 实现一个优雅便捷的博客快速构建发布工作流 最近新买了个188十年的域名，想着把它利用起来。
原本本网站服务器位于境内，其实是有ICP备案的，而我人主要在国外，总觉得有点不方便。
在此之前，我的文章和Hugo都放置在一起，放置在服务器上。这就导致每次写完文章都要单独ssh进服务器构建。这就非常麻烦。想必也能看到我到现在拢共也没写几篇，只是闲的慌的时候才来写一写。
痛定思痛，我准备尽量在本地使用Typora书写，然后致力于实现一个Push就可以同时发布在境内境外两个网站上的能力。
在了解了一番之后，我决定依靠GitHub Actions来实现这一点。
大体架构 推送到GitHub Pages并由CloudFlare CDN进行除中国大陆之外的全局加速 Contents -&amp;gt; Blog Resources(Pages Branch) -&amp;gt; GitHub Pages
由于大部分普通的方法是将content和blog resources放在一起了，虽然这可以省下来一步，但是很不优雅啊。在开始写文章之前就已经被文件夹下那么多其实和文章内容无关的文件夹和文件弄烦了。
最终我决定将文章内容单独拿出来放在一个储存库中。
Contents 储存库中设置了一个Action，当储存库有push时，将contents的内容更新到Blog 存储库中。实现及其简单粗暴，能跑就行：
name: Copy to Blog on: push: branches: [main] workflow_dispatch: jobs: copy-file: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 - name: Clone destination repository run: | git clone https://*******:${{ secrets.BLOG_TOKEN }}@github.com/*****/*****.git git clone https://******:${{ secrets.BLOG_TOKEN }}@github.com/*****/*****.git cd Blog git config user.name &amp;#34;*****&amp;#34; git config user.</description>
    </item>
    
    <item>
      <title>物联网平台的多租户实现</title>
      <link>https://blog.yfliu.site/posts/notes/%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 22 Apr 2023 10:21:39 +0000</pubDate>
      
      <guid>https://blog.yfliu.site/posts/notes/%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AE%9E%E7%8E%B0/</guid>
      <description>物联网平台的多租户实现 一个开放的物联网平台，对多个客户实行租户隔离是十分必要的。不论是从数据安全，还是资源分配上来说，实行租户隔离都能够更好的实现逻辑数据隔离，提升数据安全性。
从理论上来说，实现多租户隔离有3种形式：
完全隔离：独立数据库 独立数据库是安全性，隔离性最高的方式 成本高，需要为每个租户架设一个独立数据库 半隔离：公用数据库，独立schema 一定程度的逻辑数据隔离 成本合理 伪隔离：共享数据表 仅采用TenantID标注数据所属租户 出于成本综合考虑，平台采用了第二种方式。
结构 在平台的架构上，我们选择了Postgresql作为主数据库。这个数据库承担了用户模块的相关内容，例如租户表，权限表，用户表。同时，还承担了物模型、设备状态的存储工作。
但是由于目前租户数量有限，量级较小，但是出于数据安全隔离角度考虑，我们选择了相对折中的独立Schema架构。
根据需求，我们的数据库架构大体如下：
以用户模块为例：
为了保证性能与可用性，我们针对Postgressql，采用了三节点集群，所有的集群之间数据完全同步。在数据库中，我们设立了 iot-sys-user DB, 这个db在所有高可用节点都是通过定期任务进行同步的。在数据库中，我们采用schema进行租户隔离。我们设计了以租户代码为编号的schema，每个schema下都具有完全相同的数据表结构：
t_sys_usr: 用户表 -&amp;gt; 负责存储用户ID，邮箱，salt，SHA256或国密加密后的密码，验证符，创建时间，所属租户 t_sys_usrinfo: 用户信息表，存储了用户个性化的详细信息，例如年龄，头像url，description等内容 t_sys_role: 用户权限表，本张表详细记录了用户所具有的权限。 t_sys_agreement:记录用户阅读的agreement信息，版本，以确定是否在用户登录时要求用户阅读新的用户协议 </description>
    </item>
    
    <item>
      <title>在工作中遇到的各种知识的归纳</title>
      <link>https://blog.yfliu.site/posts/notes/%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E7%9F%A5%E8%AF%86%E7%9A%84%E5%BD%92%E7%BA%B3/</link>
      <pubDate>Wed, 15 Mar 2023 14:21:29 +0800</pubDate>
      
      <guid>https://blog.yfliu.site/posts/notes/%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E7%9F%A5%E8%AF%86%E7%9A%84%E5%BD%92%E7%BA%B3/</guid>
      <description>遇到的各种知识归纳 物联网平台的多租户实现 利用GitHub Actions实现一个博客自动构建发布系统 </description>
    </item>
    
  </channel>
</rss>
